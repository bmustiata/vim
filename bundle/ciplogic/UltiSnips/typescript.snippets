snippet req "require a module"
import * as ${1:name} from "${2:module}"
endsnippet

snippet im "import"
import { ${1:name} } from "${2:module}"
endsnippet

snippet ref "add a reference"
/// <reference path="${1:../../../typings/}${2:node}/$2.d.ts"/>
endsnippet

snippet class "Add a class"
export class ${1:name} {
	$0
}
endsnippet

snippet rreq "Add a react require"
/// <reference path="${1:}../../../typings/react/react.d.ts"/>
/// <reference path="$1../../../typings/react-dom/react-dom.d.ts"/>

import React = require('react');
endsnippet

snippet rcomponent "Create a react component"
export interface $1Props extends React.Props<any> {
}

export interface $1State {
}

export class ${1:ClassName} extends React.Component<$1Props, $1State> {
	render() {
		return (
			$0
		);
	}
}
endsnippet

snippet rrender "React DOM Render"
ReactDOM.render(
	${1:<div>what</div>},
	document.getElementById('${2:example}')
)
endsnippet

snippet action "Create a react/flux action"
/**
 * $1 - ${2:}
 */
export class ${1:CustomAction} implements Action {
	static NAME = "$1"

	name = $1.NAME
}
endsnippet

snippet datastore "Create a datastore snippet"
import { register, Action } from "../dispatch/Dispatcher"
import {EventEmitter, createEventEmitter} from "../events/EventEmitter"

export class ${1:DataStore} {
	events : EventEmitter = createEventEmitter()

	constructor() {
		register((a: Action) => {
			// if (a.name == SelectAvailablePlanAction.NAME) {
			//	this.events.emit("selected-plan-change", this.currentPlan)
			//}
			${0:}
		})
	}

	static get() : $1 {
		if (window["$1_INSTANCE"]) {
			return window["$1_INSTANCE"];
		} else {
			return window["$1_INSTANCE"] = new $1();
		}
	}
}
endsnippet

snippet singleton "Create a singleton instance"
static get() : ${1:type} {
	if (window["${2:key}"]) {
		return window["$2"];
	} else {
		return window["$2"] = new $1();
	}
}
endsnippet

