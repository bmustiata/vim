extends json

snippet /\.on/ "Create a JavaScript event handler" r
.on(${1:"click"}, function(${2:ev}) {
	${0:}
}, this);
endsnippet

snippet /\.onb/ "Create a JavaScript event handler" r
.on(${1:"click"}, bind(function(${2:ev}) {
	${0:}
}, this));
endsnippet

snippet /(func?t?i?o?n?)/ "Create a JavaScript Function" r
/**
 * $1 - ${3:}
`!p
indent = match.string[0: len(match.string) - len(match.group(1))]
for arg in re.split("\s*,\s*", t[2]):
	if arg != "":
		snip.rv += ' * @param {} ' + arg + "\n" + indent
` * @return {${4:void}}
 */
function ${1:}(${2:}) {
	${0:${VISUAL}}
}
endsnippet

snippet /(\W?class)/ "Create a JavaScript Class" r
/**
 * $1 - ${3:}
`!p
indent = match.string[0: len(match.string) - len(match.group(1))]
for arg in re.split("\s*,\s*", t[2]):
	if arg != "":
		snip.rv += ' * @param {} ' + arg + "\n" + indent
` * @return {${4:void}}
 */
function ${1:}(${2:}) {
`!p
indent = match.string[0: len(match.string) - len(match.group(1))]
for arg in re.split("\s*,\s*", t[2]):
	if arg != "":
		snip.rv += '    this.%s = %s\n%s' % (arg, arg, indent)
`	${0:${VISUAL}}
}
endsnippet

# Create a JavaScript method.
#
snippet /(meth?o?d?)/ "Create a JavaScript Method" r
/**
 * $1 - ${3:}
`!p
indent = match.string[0: len(match.string) - len(match.group(1))]
for arg in re.split("\s*,\s*", t[2]):
	if arg != "":
		snip.rv += ' * @param {} ' + arg + "\n" + indent
` * @return {${4:void}}
 */
${1:name} : function(${2:}) {
	${0:}
},
endsnippet

#
# Create an if statement, eventually also wrapping the selected code.
snippet if "Create an if statement."
if (${1:condition}) {`!p if t[2] : snip.rv = " // "`${2:}
	${0:${VISUAL}}
}
endsnippet

# Create a prototype method, and also add the parameters for the
# method.
snippet /^(.*).protot?y?p?e?/ "Create a prototype method" r
/**
 * $1 - ${3:}
`!p
for arg in re.split("\s*,\s*", t[2]):
	if arg != "":
		snip.rv += ' * @param {} ' + arg + "\n"
` * @return {${4:void}}
 */
`!p snip.rv = match.group(1)`.prototype.${1:name} = function(${2:}) {
	${0:}
}
endsnippet

snippet this. "Assign a variable to this"
this.${1:name} = $1;
endsnippet

snippet try "Add a try/catch statement"
try {
	${0:${VISUAL}}
} catch (${1:e}) {
	// FIXME: implement
}
endsnippet

snippet /\.then/ "Add a then statement" r
.then(function(${1:data}) {
	${0:}
});
endsnippet

snippet bin "Add a bin entry"
"bin": {
	"${1:program}": "bin/$1.js"
},
endsnippet

snippet jsscope "Create an anonyomous function for a JS scope"
(function($) {

${0:}

})(${1:jQuery});
endsnippet

snippet cclass "Create a ciplogic class"
namespace("${1:namespace.name}").${2:ClassName} = createClass(${3:Object}, {
	${0:}
});
endsnippet

snippet /forEach/ "A forEach statement" r
forEach(function(${1:it}) {
	${0:}
});
endsnippet

snippet /each/ "A forEach statement" r
forEach(function(${1:it}) {
	${0:}
});
endsnippet

snippet livereload "Creates the live reload necessary code."
(function() {

var ws;

// you need node-live-reload running on the given port.
function socket() {
	ws = new WebSocket("ws://127.0.0.1:${1:8084}");
	ws.onmessage = function ( e ) {
		var data = JSON.parse(e.data);
		if ( data.r ) {
			location.reload();
		}
	};
}

setInterval(function () {
	if ( ws ) {
		if ( ws.readyState !== 1 ) {
			socket();
		}
	} else {
		socket();
	}
}, ${2:100});

})();
endsnippet


snippet req "Require a module."
require("$1")${0:}
endsnippet

snippet @p "Add a JsDoc parameter."
@param {${1:Object}} ${2:name} ${3:description}
endsnippet

snippet @t "Add a JsDoc type."
@type {${1:Object}}
endsnippet

snippet @r "Adds a JSDoc return."
@return {${1:Object}}
endsnippet

snippet c "Add a comment."
/**
 * ${0:}
 */
endsnippet

snippet cs "Comment section"
// ==========================================================================
// ${0:}
// ==========================================================================
endsnippet

snippet log "Add a console.log"
console.log(${0:});
endsnippet
