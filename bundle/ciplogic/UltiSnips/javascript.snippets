snippet /(func?t?i?o?n?)/ "Create a JavaScript Function" r
/**
 * $1 - ${3:}
`!p
indent = match.string[0: len(match.string) - len(match.group(1))]
for arg in re.split("\s*,\s*", t[2]):
	if arg != "":
		snip.rv += ' * @param {} ' + arg + "\n" + indent
` * @return {${4:void}}
 */
function ${1:}(${2:}) {
	${5:${VISUAL}}
}
endsnippet

# Create a JavaScript method.
#
snippet /(meth?o?d?)/ "Create a JavaScript Method" r
/**
 * $1 - ${3:}
`!p
indent = match.string[0: len(match.string) - len(match.group(1))]
for arg in re.split("\s*,\s*", t[2]):
	if arg != "":
		snip.rv += ' * @param {} ' + arg + "\n" + indent
` * @return {${4:void}}
 */
${1:name} : function(${2:}) {
	${5:}
},
endsnippet

#
# Create an if statement, eventually also wrapping the selected code.
snippet if "Create an if statement."
if (${1:condition}) {`!p if t[2] : snip.rv = " // "`${2:}
	${3:${VISUAL}}
}
endsnippet

# Create a prototype method, and also add the parameters for the
# method.
snippet /^(.*).protot?y?p?e?/ "Create a prototype method" r
/**
 * $1 - ${3:}
`!p
for arg in re.split("\s*,\s*", t[2]):
	if arg != "":
		snip.rv += ' * @param {} ' + arg + "\n"
` * @return {${4:void}}
 */
`!p snip.rv = match.group(1)`.prototype.${1:name} = function(${2:}) {
	${5:}
}
endsnippet

snippet this. "Assign a variable to this"
this.${1:name} = $1;
endsnippet

snippet try "Add a try/catch statement"
try {
	${2:${VISUAL}}
} catch (${1:e}) {
	// FIXME: implement
}
endsnippet

snippet /\.then/ "Add a then statement" r
.then(function(${1:data}) {
	${2:}
});
endsnippet

