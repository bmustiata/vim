#############################################################################
# General Grunt Configurations.
#############################################################################
snippet grunt "Adds a default empty grunt configuration"
/**
 * Grunt project configuration.
 */
module.exports = function(grunt) {
	// configuration for the plugins.
	grunt.initConfig({
		${0:}
	});

	// load NPM tasks:
	// grunt.loadNpmTasks("grunt-contrib-watch");

	// register our tasks:
	grunt.registerTask("default", []);
};
endsnippet

snippet grunt_typescript_mocha "Adds a grunt with mocha and typescript config"
/**
 * Grunt project configuration.
 */
module.exports = function(grunt) {
	// configuration for the plugins.

	// Project name:		${1:project-name}
	// Main ts module:	  ${2:MainApplication}
	// Source folder:	   ${3:src/main/ts}
	// Tests source folder: ${4:src/test/ts}
	// Output folder:	   ${5:lib/}
	// Test output folder:  ${6:target/test}

	grunt.initConfig({
		clean: {
			dist : [
				"$5"
			],

			test : [
				"$6"
			]
		},

		typescript: {
			"dist" : {
				options: {
					module : "commonjs",
					sourceMap: true,
					declaration: true,
				},
				files: [{
					dest: "$5",
					src: [
						"$3/**/*.ts",
						"$3/**/*.d.ts"
					]
				}]
			},

			"test" : {
				options: {
					module : "commonjs",
					sourceMap: true,
					declaration: true,
				},
				files: [{
					dest: "$6",
					src: [
						"$4/**/*.ts",
						"$4/**/*.d.ts"
					]
				}]
			}
		},

		dtsGenerator : {
			"dist" : {
				options: {
					name: "$1",
					baseDir: ".",
					out: "$1.d.ts",
					main: "$1/$5$2",
					excludes: [
						"node_modules/**/*.d.ts",
						"typings/**/*.d.ts"
					]
				},

				files : [
					{
						expand: true,
						src: [
							"$5*.d.ts"
						]
					}
				]
			}
		},

		mochaTest: {
			test: {
				options: {
					reporter: "spec",
					captureFile: "$6tests_results.txt"
				},
				src: ["$6**/*.js"]
			}
		}
	});

	// load NPM tasks:
	grunt.loadNpmTasks("grunt-contrib-clean");
	grunt.loadNpmTasks("grunt-typescript");
	grunt.loadNpmTasks("ciplogic-dts-generator");
	grunt.loadNpmTasks("grunt-mocha-test");

	grunt.registerTask("dist", ["clean:dist", "typescript:dist", "dtsGenerator:dist"]);
	grunt.registerTask("test", ["clean:test", "typescript:test", "mochaTest:test"]);

	// register our tasks:
	grunt.registerTask("default", ["dist", "test"]);
};

endsnippet

snippet grunt_load "Adds a default empty grunt configuration, loading plugins automatically."
/**
 * Grunt project configuration.
 */
module.exports = function(grunt) {
	require("load-grunt-tasks")(grunt);

	// configuration for the plugins.
	grunt.initConfig({
		${0:}
	});

	// register our tasks:
	grunt.registerTask("default", []);
};
endsnippet

snippet load-grunt-tasks "Loads the grunt tasks using load-grunt-tasks"
require("load-grunt-tasks")(grunt);${0:}
endsnippet

#############################################################################
# Generic Plugins
#############################################################################
snippet plug "Add a Grunt NPM plugin"
grunt.loadNpmTasks("${1:grunt-contrib-clean}");${0:}
endsnippet

snippet config "Adds a config part"
${1:pluginName} : {
	"${2:dist}" : {
		files : [
			{
				expand: true,
				cwd: "${3:src/}",
				src: [
					"${5:**}"${0:}
				],
				dest: "${4:dest/}"
			}
		]
	}
}
endsnippet

snippet file "Adds a files slector for grunt."
{
	expand: true,
	cwd: "${1:src/}",
	src: [
		"${3:**}"${0:}
	],
	dest: "${2:dest/}"
}
endsnippet

snippet target "Adds another target for a config task"
${1:dist} : {
	files: [
		{ expand: true, cwd: "${2:src/}", src: ["${3:**}"], dest: "${4:dest/}" }${0:}
	]
}
endsnippet

#############################################################################
# Compass Support
#############################################################################
snippet plugcompass "Add compass Grunt NPM tasks"
grunt.loadNpmTasks("grunt-contrib-compass");${0:}
endsnippet

snippet compassConfig "Adds the compass config for the plugin"
compass: {
	${1:dist} : {
		options: {
			sassDir: "${2:scss}",
			cssDir: "${3:css}",
			sourcemap: true
			// environment: "production"
		}
	}
}
endsnippet

#############################################################################
# Copy Support
#############################################################################
snippet plugcopy "Add copy Grunt NPM plugin"
grunt.loadNpmTasks("grunt-contrib-copy");${0:}
endsnippet

snippet copyConfig "Adds the copy config for the plugin."
copy: {
	${1:dist} : {
		files: [
			{ expand: true, cwd: "${2:src/}", src: ["${3:**}"], dest: "${4:dest/}" }${0:}
		]
	}
}
endsnippet

#############################################################################
# Clean Support
#############################################################################
snippet plugclean "Add clean Grunt NPM plugin"
grunt.loadNpmTasks("grunt-contrib-clean");${0:}
endsnippet

snippet cleanConfig "Adds the clean config for the plugin."
clean: {
	${1:dist} : [
		"${2:remove-path/}"${0:}
	]
}
endsnippet

snippet cleanTarget "Adds a clean target."
${1:dist} : [
	"${2:remove-path/}"
]${0:}
endsnippet

#############################################################################
# Watch Support
#############################################################################
snippet plugwatch "Add watch Grunt NPM plugin"
grunt.loadNpmTasks("grunt-contrib-watch");${0:}
endsnippet

snippet watchConfig "Adds a watch config for the plugin."
watch : {
	${1:dist} : {
		files: [ ${2:"src/*"} ],
		tasks: [ ${3:"default"} ]
	}${0:}
}
endsnippet

snippet watchTarget "Adds a watch target for the plugin."
${1:dist} : {
	files: [ ${2:"src/*"} ],
	tasks: [ ${3:"default"} ]
}${0:}
endsnippet

#############################################################################
# ES6 Transpiler
#############################################################################
snippet pluges6stranspiler "Add ES6 Transpiler Grunt NPM plugin"
grunt.loadNpmTasks("grunt-es6-transpiler");${0:}
endsnippet

snippet es6transpilerConfig "Adds the ES6 transpiler plugin configuration"
es6transpiler: {
	${1:dist}: {
		files : [
			{ expand: true, cwd: "${2:src/}", src: ["${3:*.js}"], dest: "${4:dest/}" }
		]
	}${0:}
}
endsnippet

#############################################################################
# ES6 Tracer (google) Transpiler
#############################################################################
snippet pluges6traceur "Add ES6 Traceur Grunt NPM Plugin"
grunt.loadNpmTasks("grunt-traceur");${0:}
endsnippet

snippet es6traceurConfig "Adds a traceur configuration for the plugin."
traceur : {
	options: {
		moduleNaming: {
			stripPrefix: "$3",
			addPrefix: "${6:}"
		},
		copyRuntime: "${5:$4}"
	},
	${1:dist} : {
		files : [
			{ expand: true, cwd: "${2:src/}", src: ["${3:**}"], dest: "${4:dest/}" }${0:}
		]
	}
}
endsnippet

#############################################################################
# TypeScript
#############################################################################
snippet plugtsc "Adds the TypeScript Grunt NPM Plugin"
grunt.loadNpmTasks("grunt-typescript");${0:}
endsnippet

snippet tscConfig "Adds a TypeScript configuration."
typescript: {
	"${1:dist}" : {
		options: {
			${2/.+/module : "/}${2:commonjs}${2/.+/",/}
			${3/.+/sourceMap: /}${3:true}${3/.+/,/}
			${4/.+/declaration: /}${4:true}${4/.+/,/}
		},
		files: [{
			dest: "${5:target/out.js}",
			src: [
				"${6:src/main/core/**/*}.ts",
				"$6.d.ts"
			]
		}]
	}
}
endsnippet

#############################################################################
# Mocha
#############################################################################
snippet plugmocha "Adds the Mocha Grunt NPM plugin."
grunt.loadNpmTasks("grunt-mocha-test");
endsnippet

snippet mochaTestConfig "Adds a mochaTest configuration for the plugin."
mochaTest: {
	${1:test}: {
		options: {
			reporter: "spec",
			captureFile: "${2:target/tests_results.txt}"
		},
		src: ["${3:test/**/*.js}"]${0:}
	}
}
endsnippet

#############################################################################
# Grunt-Sync
#############################################################################
snippet plugsync "Adds the Grunt Sync Copy NPM plugin."
grunt.loadNpmTasks("grunt-sync");
endsnippet

snippet syncConfig "Adds the grunt-sync configuration for the plugin."
sync : {
	${1:dist} : {
		// pretend: true,
		verbose: ${2:true},
		files : [
			{
				expand: true,
				cwd: "${3:src/}",
				src: [
					"${5:**}"${0:}
				],
				dest: "${4:dest/}"${0:}
			}
		]
	}
}
endsnippet

#############################################################################
# Concat
#############################################################################
snippet plugconcat "Add the Grunt Concat NPM plugin."
grunt.loadNpmTasks("grunt-contrib-concat");
endsnippet

snippet concatConfig "Adds the concat configuration for the plugin."
concat: {
	options: {
		sourceMap: ${1:true}
	},
	${2:dist}: {
		files : [
			{
				src: [
					"${3:src/main.js}"
				],
				dest: "${4:target/out.js}"${0:}
			}
		]
	}
}
endsnippet

snippet concatTarget "Adds a concat target."
${1:dist}: {
	files: [
		{
			src: [
				${2:"src/main.js"}
			],
			dest: "${3:target/out.js}"
		}
	]
}
endsnippet

#############################################################################
# MkDir
#############################################################################
snippet plugmkdir "Add the Grunt MkDir NPM plugin."
grunt.loadNpmTasks("grunt-mkdir");
endsnippet

snippet mkdirConfig "Add the mkdir configuration for the plugin"
mkdir : {
	${1:dist} : {
		options: {
			create: [ "${2:target/}" ]
		}
	}${0:}
}
endsnippet

snippet mkdirTarget "Add the mkdir configuration target"
${1:dist} : {
	options: {
		create: [ "${2:target/}" ]
	}
}${0:}
endsnippet

#############################################################################
# Register new tasks.
#############################################################################
snippet task "registers a new task."
grunt.registerTask("${1:name}", [${0:}]);
endsnippet

#############################################################################
# DtsGenerator
#############################################################################
snippet plugdtsGenerator "Add the dts generator task"
grunt.loadNpmTasks("dts-generator");
endsnippet

snippet dtsGeneratorConfig "Add the d.ts file generator config."
dtsGenerator : {
	"${1:dist}" : {
		options: {
			name: "${2:core-lang}",
			baseDir: ".",
			out: "$2.d.ts",
			main: "$2${3:/lib/Iterable}",
			// FIXME: remove when dts-generator gets fixed.
			excludes: [
				"node_modules/dts-generator/node_modules/typescript/bin/lib.core.d.ts",
				"node_modules/dts-generator/node_modules/typescript/bin/lib.core.es6.d.ts",
				"node_modules/dts-generator/node_modules/typescript/bin/lib.dom.d.ts",
				"node_modules/dts-generator/node_modules/typescript/bin/lib.d.ts",
				"node_modules/dts-generator/node_modules/typescript/bin/lib.es6.d.ts",
				"node_modules/dts-generator/node_modules/typescript/bin/lib.scriptHost.d.ts",
				"node_modules/dts-generator/node_modules/typescript/bin/lib.webworker.d.ts",
				"node_modules/dts-generator/node_modules/typescript/bin/typescript.d.ts",
				"node_modules/dts-generator/node_modules/typescript/bin/typescript_internal.d.ts",
				"node_modules/dts-generator/node_modules/typescript/bin/typescriptServices.d.ts",
				"node_modules/dts-generator/node_modules/typescript/bin/typescriptServices_internal.d.ts"
			]
		},
		files : [
			{
				expand: true,
				src: [
					"${4:lib}/*.d.ts"
				]
			}
		]
	}
}
endsnippet

#############################################################################
# babel support
#############################################################################
snippet babelConfig "Add a babel target."
babel: {
	${1:dist} : {
		options: {
			${2/.+/sourceMap: /}${2:true}
		},
		files: [
			{ expand: true, cwd: "${3:src/}", src: ["${4:**/*.jsx}"${0:}], dest: "${5:target/jsx/}" }
		]
	}
}
endsnippet

snippet plugbabel "Plugs the babel plugin"
grunt.loadNpmTasks("grunt-babel");
endsnippet
